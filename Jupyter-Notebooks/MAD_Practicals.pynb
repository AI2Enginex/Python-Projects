{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MAD_Practicals.pynb","provenance":[],"collapsed_sections":[],"mount_file_id":"1nB4zLVWvYR5bWde2kFuqX8rELHrFd7Cl","authorship_tag":"ABX9TyOkGEXVpThjuqbpIl+RB23r"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **BFS traversal**"],"metadata":{"id":"OJDNBBYodYfn"}},{"cell_type":"code","source":["graph = {\n","  '1' : ['4','2'],\n","  '2' : ['1','3', '5','7','8'],\n","  '3' : ['10','9','4','2'],\n","  '4' : ['1','3'],\n","  '5' : ['2','7','6'],\n","  '6' : ['5'],\n","  '7' : ['5','8'],\n","  '8' : ['2','7','5'],\n","  '9' : [],\n","  '10' : []\n","}\n","\n","visited = [] \n","queue = []     \n","\n","def bfs(visited, graph, node): \n","  visited.append(node)\n","  queue.append(node)\n","\n","  while queue:          \n","    m = queue.pop(0) \n","    print (m, end = \" \") \n","\n","    for neighbour in graph[m]:\n","      if neighbour not in visited:\n","        visited.append(neighbour)\n","        queue.append(neighbour)\n","        \n","bfs(visited, graph, '1')   "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"100V0F4WdT-E","executionInfo":{"status":"ok","timestamp":1655350493573,"user_tz":-330,"elapsed":17,"user":{"displayName":"Vibhor Sakalley","userId":"08508309510612408116"}},"outputId":"7a6ac6c0-4953-4ac2-bbe1-2a60b87a6caf"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["1 4 2 3 5 7 8 10 9 6 "]}]},{"cell_type":"markdown","source":["# **DFS traversal**"],"metadata":{"id":"2vgPZSQbdpFw"}},{"cell_type":"code","source":["graph = {\n","  '1' : ['4','2'],\n","  '2' : ['1','3', '5','7','8'],\n","  '3' : ['10','9','4','2'],\n","  '4' : ['1','3'],\n","  '5' : ['2','7','6'],\n","  '6' : ['5'],\n","  '7' : ['5','8'],\n","  '8' : ['2','7','5'],\n","  '9' : [],\n","  '10' : []\n","}\n","\n","visited = set() \n","\n","def dfs(visited, graph, node): \n","    if node not in visited:\n","        print(node , end = \" \")\n","        visited.add(node)\n","        for neighbour in graph[node]:\n","            dfs(visited, graph, neighbour)\n","\n","print(\"Following is the Depth-First Search\")\n","dfs(visited, graph, '1')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pNB1YMbZdmEl","executionInfo":{"status":"ok","timestamp":1655350493574,"user_tz":-330,"elapsed":12,"user":{"displayName":"Vibhor Sakalley","userId":"08508309510612408116"}},"outputId":"4b21409d-99e0-4f35-e425-dfde4f099761"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Following is the Depth-First Search\n","1 4 3 10 9 2 5 7 8 6 "]}]},{"cell_type":"markdown","source":["# **Insertion Sort**"],"metadata":{"id":"peciSXRmd6BH"}},{"cell_type":"code","source":["def insertion_sort(items):\n","\n","  for i in range(1,len(items)):\n","\n","    current = items[i]\n","    hole = i\n","\n","    while hole > 0 and items[hole - 1] > current:\n","      items[hole] = items[hole - 1]\n","      hole = hole - 1\n","    items[hole] = current\n","    print('at iteration {} the value is {}'.format(i,items))\n","\n","\n","items = [7,8,4,3,6,2]\n","insertion_sort(items)\n","print('list after sorting : ',items)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"goQKNW_Id46h","executionInfo":{"status":"ok","timestamp":1655350493575,"user_tz":-330,"elapsed":11,"user":{"displayName":"Vibhor Sakalley","userId":"08508309510612408116"}},"outputId":"6f2e3796-0b54-48c3-c1fa-58e38628653b"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["at iteration 1 the value is [7, 8, 4, 3, 6, 2]\n","at iteration 2 the value is [4, 7, 8, 3, 6, 2]\n","at iteration 3 the value is [3, 4, 7, 8, 6, 2]\n","at iteration 4 the value is [3, 4, 6, 7, 8, 2]\n","at iteration 5 the value is [2, 3, 4, 6, 7, 8]\n","list after sorting :  [2, 3, 4, 6, 7, 8]\n"]}]},{"cell_type":"markdown","source":["# **Binary Search**"],"metadata":{"id":"Qxb0GOnVe1rB"}},{"cell_type":"code","source":["def binary_search(x , value):\n","\n","  lower_bound = 0\n","  upper_bound = len(x) - 1\n","\n","  while lower_bound <= upper_bound:\n","\n","    middle = int((lower_bound + upper_bound)/ 2)\n","\n","    if x[middle] == value:\n","      return middle\n","\n","    elif value < x[middle]:\n","      \n","      upper_bound = middle - 1\n","\n","    else:\n","      lower_bound = middle + 1\n","\n","  return -1\n","\n","x = [1,2,3,4,5,6,7,8]\n","val = int(input('enter a value to search : '))\n","i = binary_search(x , val)\n","if i == -1:\n","  print(\"value not found\")\n","else:\n","  print(\"value {} found at position {}\".format(val , i))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YLcdWD13ctCL","executionInfo":{"status":"ok","timestamp":1655350514784,"user_tz":-330,"elapsed":21216,"user":{"displayName":"Vibhor Sakalley","userId":"08508309510612408116"}},"outputId":"fd3a2bbe-5c98-45e2-a391-c989aea75289"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["enter a value to search : 4\n","value 4 found at position 3\n"]}]},{"cell_type":"markdown","source":["# **Merge Sort**"],"metadata":{"id":"tRnJSARFeRDd"}},{"cell_type":"code","source":["def merge_sort(lst):\n","    if len(lst) <= 1:\n","        return lst\n","\n","    middle = len(lst)//2\n","    left_list = lst[:middle]\n","    right_list = lst[middle:]\n","\n","    left_list = merge_sort(left_list)\n","    right_list = merge_sort(right_list)\n","    return list(merge(left_list,right_list))\n","\n","def merge(left_half,right_half):\n","    res = []\n","    while len(left_half) != 0 and len(right_half) != 0:\n","        if left_half[0] < right_half[0]:\n","            res.append(left_half[0])\n","            left_half.remove(left_half[0])\n","        else:\n","            res.append(right_half[0])\n","            right_half.remove(right_half[0])\n","    \n","    if len(left_half) == 0:\n","        res = res + right_half\n","    else:\n","        res = res + left_half\n","\n","    return res\n","lst = [6,7,4,8,2,10]\n","s = merge_sort(lst)\n","print(s)"],"metadata":{"id":"nN83xISme7o9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655350514785,"user_tz":-330,"elapsed":19,"user":{"displayName":"Vibhor Sakalley","userId":"08508309510612408116"}},"outputId":"0e93e75f-2300-4f1e-d1cb-590a49eb81da"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 4, 6, 7, 8, 10]\n"]}]},{"cell_type":"markdown","source":["# *Dijisktra Algorithm*"],"metadata":{"id":"W9Cm6uNBmrAd"}},{"cell_type":"code","source":["from queue import PriorityQueue\n","\n","class Graph:\n","    def __init__(self, num_of_vertices):\n","        self.v = num_of_vertices\n","        self.edges = [[-1 for i in range(num_of_vertices)] for j in range(num_of_vertices)]\n","        self.visited = []\n","\n","    def add_edge(self, u, v, weight):\n","        self.edges[u][v] = weight\n","        self.edges[v][u] = weight\n","\n","\n","def dijkstra(graph, start_vertex):\n","      D = {v:float('inf') for v in range(graph.v)}\n","      D[start_vertex] = 0\n","      pq = PriorityQueue()\n","      pq.put((0, start_vertex))\n","      \n","      while not pq.empty():\n","        (dist, current_vertex) = pq.get()\n","        graph.visited.append(current_vertex)\n","\n","        for neighbor in range(graph.v):\n","            if graph.edges[current_vertex][neighbor] != -1:\n","                distance = graph.edges[current_vertex][neighbor]\n","                if neighbor not in graph.visited:\n","                    old_cost = D[neighbor]\n","                    new_cost = D[current_vertex] + distance\n","                    if new_cost < old_cost:\n","                        pq.put((new_cost, neighbor))\n","                        D[neighbor] = new_cost\n","      return D\n","\n","\n","g = Graph(9)\n","g.add_edge(0, 1, 4)\n","g.add_edge(0, 6, 7)\n","g.add_edge(1, 6, 11)\n","g.add_edge(1, 7, 20)\n","g.add_edge(1, 2, 9)\n","g.add_edge(2, 3, 6)\n","g.add_edge(2, 4, 2)\n","g.add_edge(3, 4, 10)\n","g.add_edge(3, 5, 5)\n","g.add_edge(4, 5, 15)\n","g.add_edge(4, 7, 1)\n","g.add_edge(4, 8, 5)\n","g.add_edge(5, 8, 12)\n","g.add_edge(6, 7, 1)\n","g.add_edge(7, 8, 3) \n","\n","\n","\n","\n","D = dijkstra(g, 0)\n","for vertex in range(len(D)):\n","    print(\"Distance from vertex 0 to vertex\", vertex, \"is\", D[vertex])\n","print(D)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sFYPEPoKlHsG","executionInfo":{"status":"ok","timestamp":1655350898406,"user_tz":-330,"elapsed":629,"user":{"displayName":"Vibhor Sakalley","userId":"08508309510612408116"}},"outputId":"bdaac2ee-e7ae-4275-93c8-ff74e989dd65"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Distance from vertex 0 to vertex 0 is 0\n","Distance from vertex 0 to vertex 1 is 4\n","Distance from vertex 0 to vertex 2 is 11\n","Distance from vertex 0 to vertex 3 is 17\n","Distance from vertex 0 to vertex 4 is 9\n","Distance from vertex 0 to vertex 5 is 22\n","Distance from vertex 0 to vertex 6 is 7\n","Distance from vertex 0 to vertex 7 is 8\n","Distance from vertex 0 to vertex 8 is 11\n","{0: 0, 1: 4, 2: 11, 3: 17, 4: 9, 5: 22, 6: 7, 7: 8, 8: 11}\n"]}]},{"cell_type":"markdown","source":["# **Krushkal Algorithm**"],"metadata":{"id":"vSAzAee6naX3"}},{"cell_type":"code","source":["class Graph:\n","    def __init__(self, vertices):\n","        self.V = vertices\n","        self.graph = []\n","\n","    def add_edge(self, u, v, w):\n","        self.graph.append([u, v, w])\n","\n","    def find(self, parent, i):\n","        if parent[i] == i:\n","            return i\n","        return self.find(parent, parent[i])\n","\n","    def apply_union(self, parent, rank, x, y):\n","        xroot = self.find(parent, x)\n","        yroot = self.find(parent, y)\n","        if rank[xroot] < rank[yroot]:\n","            parent[xroot] = yroot\n","        elif rank[xroot] > rank[yroot]:\n","            parent[yroot] = xroot\n","        else:\n","            parent[yroot] = xroot\n","            rank[xroot] += 1\n","\n","    def kruskal_algo(self):\n","        result = []\n","        i, e = 0, 0\n","        self.graph = sorted(self.graph, key=lambda item: item[2])\n","        parent = []\n","        rank = []\n","        for node in range(self.V):\n","            parent.append(node)\n","            rank.append(0)\n","        while e < self.V - 1:\n","            u, v, w = self.graph[i]\n","            i = i + 1\n","            x = self.find(parent, u)\n","            y = self.find(parent, v)\n","            if x != y:\n","                e = e + 1\n","                result.append([u, v, w])\n","                self.apply_union(parent, rank, x, y)\n","        for u, v, weight in result:\n","            print(\"%d - %d: %d\" % (u, v, weight))\n","\n","\n","g = Graph(6)\n","g.add_edge(0, 1, 4)\n","g.add_edge(0, 2, 4)\n","g.add_edge(1, 2, 2)\n","g.add_edge(1, 0, 4)\n","g.add_edge(2, 0, 4)\n","g.add_edge(2, 1, 2)\n","g.add_edge(2, 3, 3)\n","g.add_edge(2, 5, 2)\n","g.add_edge(2, 4, 4)\n","g.add_edge(3, 2, 3)\n","g.add_edge(3, 4, 3)\n","g.add_edge(4, 2, 4)\n","g.add_edge(4, 3, 3)\n","g.add_edge(5, 2, 2)\n","g.add_edge(5, 4, 3)\n","g.kruskal_algo()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WSsyitWulIuZ","executionInfo":{"status":"ok","timestamp":1655351109865,"user_tz":-330,"elapsed":22,"user":{"displayName":"Vibhor Sakalley","userId":"08508309510612408116"}},"outputId":"fa6f2b42-1aa5-4b91-e588-006ef4548e87"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["1 - 2: 2\n","2 - 5: 2\n","2 - 3: 3\n","3 - 4: 3\n","0 - 1: 4\n"]}]},{"cell_type":"code","source":["from collections import defaultdict\n","\n","class Graph:\n","\n","    def __init__(self,n):\n","\n","        self.graph = defaultdict(list)\n","\n","        self.N = n\n","\n","    def addEdge(self,m,n):\n","\n","        self.graph[m].append(n)\n","\n","    def sortUtil(self,n,visited,stack):\n","\n","        visited[n] = True\n","\n","        for element in self.graph[n]:\n","\n","            if visited[element] == False:\n","\n","                self.sortUtil(element,visited,stack)\n","\n","        stack.insert(0,n)\n","\n","    def topologicalSort(self):\n","\n","        visited = [False]*self.N\n","\n","        stack =[]\n","\n","        for element in range(self.N):\n","\n","            if visited[element] == False:\n","\n","                self.sortUtil(element,visited,stack)\n","\n","        print(stack)\n","\n","graph = Graph(5)\n","graph.addEdge(0,1);\n","graph.addEdge(0,3);\n","graph.addEdge(1,2);\n","graph.addEdge(2,3);\n","graph.addEdge(2,4);\n","graph.addEdge(3,4);\n","\n","print(\"The Topological Sort Of The Graph Is:  \")\n","\n","graph.topologicalSort()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4ZuwkUMEnWH-","executionInfo":{"status":"ok","timestamp":1655351815184,"user_tz":-330,"elapsed":442,"user":{"displayName":"Vibhor Sakalley","userId":"08508309510612408116"}},"outputId":"87596295-a6cb-4339-b8e3-dab09fcc1c3f"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["The Topological Sort Of The Graph Is:  \n","[0, 1, 2, 3, 4]\n"]}]},{"cell_type":"markdown","source":["# **Counting Sort**"],"metadata":{"id":"mmrOQudp37Id"}},{"cell_type":"code","source":["\n","class Graph:\n","\n","    def __init__(self):\n","      self.graph = {}\n","      self.entry_lst = [1,1,1,5,8,5,5,6,1,3,4]\n","      \n","\n","    def count_frequencies(self):\n","\n","      for i in self.entry_lst:\n","        if i not in self.graph:\n","          self.graph[i] = 1\n","        else:\n","          self.graph[i] += 1\n","\n","    def count_n_sort(self):\n","\n","      self.count_frequencies()\n","      array_ = [str(key).split()*value for key , value  in sorted(self.graph.items())]\n","      sorted_array = [int(ele) for x in array_ for ele in  x]\n","      return sorted_array\n","      \n","    \n","\n","g = Graph()\n","sorted_elements = g.count_n_sort()\n","print(sorted_elements)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UpUG9LYPqCYE","executionInfo":{"status":"ok","timestamp":1655355951111,"user_tz":-330,"elapsed":375,"user":{"displayName":"Vibhor Sakalley","userId":"08508309510612408116"}},"outputId":"182a85c9-691e-492b-ec31-98a705a379da"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 1, 1, 1, 3, 4, 5, 5, 5, 6, 8]\n"]}]},{"cell_type":"code","source":["\n","def knapSack(W, wt, val, n):\n"," \n","    if n == 0 or W == 0:\n","        return 0\n"," \n","    if (wt[n-1] > W):\n","        return knapSack(W, wt, val, n-1)\n"," \n","  \n","    else:\n","        return max(\n","            val[n-1] + knapSack(\n","                W-wt[n-1], wt, val, n-1),\n","            knapSack(W, wt, val, n-1))\n"," \n","val = [60, 100, 120]\n","wt = [10, 20, 30]\n","W = 50\n","n = len(val)\n","print(knapSack(W, wt, val, n))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"99hxSFii2MDJ","executionInfo":{"status":"ok","timestamp":1655355576661,"user_tz":-330,"elapsed":6,"user":{"displayName":"Vibhor Sakalley","userId":"08508309510612408116"}},"outputId":"0d9e8690-47d3-4e61-a124-5bb113cba26f"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["220\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"gV6mgmz94Ywq"},"execution_count":null,"outputs":[]}]}